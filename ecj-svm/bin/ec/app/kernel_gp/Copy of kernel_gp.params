# Copyright 2006 by Sean Luke and George Mason University
# Licensed under the Academic Free License version 3.0
# See the file "LICENSE" for more information

parent.0 = ../../../../lib/ecj/ec/gp/koza/koza.params

# the next four items are already defined in koza.params, but we
# put them here to be clear.


gp.type.a.size = 4

#SVM nodes - svm_node objects vector
gp.type.a.0.name = svmnodes

#Kernel - svm kernel
gp.type.a.1.name = kernel

#ERC constant
gp.type.a.2.name = constant

#Liczba rzeczywista, zwracana przez kernele
gp.type.a.3.name = double

# We have one function set, of class GPFunctionSet
gp.fs.size = 1
gp.fs.0 = ec.gp.GPFunctionSet
# We'll call the function set "f0".
gp.fs.0.name = f0


#Node constraints
gp.nc.size = 6

#Leaf - return vector of svm_node
gp.nc.0 = ec.gp.GPNodeConstraints
gp.nc.0.name = nc_terminal
gp.nc.0.returns = svmnodes
gp.nc.0.size = 0

#Standard kernel function - 
gp.nc.1 = ec.gp.GPNodeConstraints
gp.nc.1.name = nc_kernel
gp.nc.1.returns = double
gp.nc.1.size = 2
gp.nc.1.child.0 = svmnodes
gp.nc.1.child.1 = svmnodes

#Constant modification of kernel - for ex. exp(kernel)
gp.nc.2 = ec.gp.GPNodeConstraints
gp.nc.2.name = nc_k-combination1
gp.nc.2.returns = double
gp.nc.2.size = 1
gp.nc.2.child.0 = double

#Combination of two kernels
gp.nc.3 = ec.gp.GPNodeConstraints
gp.nc.3.name = nc_k-combination2
gp.nc.3.returns = double
gp.nc.3.size = 2
gp.nc.3.child.0 = double
gp.nc.3.child.1 = double

#Combination of kernel and ECR constant
gp.nc.4 = ec.gp.GPNodeConstraints
gp.nc.4.name = nc_k-combination-c
gp.nc.4.returns = double
gp.nc.4.size = 2
gp.nc.4.child.0 = double
gp.nc.4.child.1 = constant

#Terminal with ECR constant
gp.nc.5 = ec.gp.GPNodeConstraints
gp.nc.5.name = nc_constant
gp.nc.5.returns = constant
gp.nc.5.size = 0


pop.subpop.0.species.fitness = ec.simple.SimpleFitness

# We have five functions in the function set.  They are:
gp.fs.0.size = 5

#Terminal with svm_node vector
gp.fs.0.func.0 = ec.app.kernel_gp.X
gp.fs.0.func.0.nc = nc_terminal

#Terminal with svm_node vector
gp.fs.0.func.1 = ec.app.kernel_gp.Y
gp.fs.0.func.1.nc = nc_terminal

#Add function used to combine two kernels into one
gp.fs.0.func.2 = ec.app.kernel_gp.Add
gp.fs.0.func.2.nc = nc_k-combination2

#Addition function used to combine two kernels into one
gp.fs.0.func.3 = ec.app.kernel_gp.Mul
gp.fs.0.func.3.nc = nc_k-combination2

#Expotential function used to produce one kernel from another
## gp.fs.0.func.4 = ec.app.kernel_gp.Exp
## gp.fs.0.func.4.nc = nc_k-combination1

#Multiplication of kernel by double
# gp.fs.0.func.5 = ec.app.kernel_gp.aMul
# gp.fs.0.func.5.nc = nc_k-combination-c

#RBF - standard kernel function 
# gp.fs.0.func.6 = ec.app.kernel_gp.RBF
# gp.fs.0.func.6.nc = nc_kernel

#Polynomial - standard kernel function  
gp.fs.0.func.7 = ec.app.kernel_gp.Poly
gp.fs.0.func.7.nc = nc_kernel

#Sigmoid - standard kernel function
# gp.fs.0.func.8 = ec.app.kernel_gp.Sigmoid
# gp.fs.0.func.8.nc = nc_kernel

# gp.fs.0.func.9 = ec.app.kernel_gp.ERCa
# gp.fs.0.func.9.nc = nc_constant

# gp.fs.0.func.10 = ec.app.kernel_gp.ERC_Poly_gamma
# gp.fs.0.func.10.nc = nc_constant

# gp.fs.0.func.11 = ec.app.kernel_gp.ERC_Poly_coef
# gp.fs.0.func.11.nc = nc_constant

# gp.fs.0.func.12 = ec.app.kernel_gp.ERC_Poly_degree
# gp.fs.0.func.12.nc = nc_constant

# gp.fs.0.func.13 = ec.app.kernel_gp.ERC_RBF_gamma
# gp.fs.0.func.13.nc = nc_constant

eval.problem = ec.app.kernel_gp.Kernel_GP_problem
eval.problem.data = ec.app.kernel_gp.SVMData
