# Copyright 2006 by Sean Luke and George Mason University
# Licensed under the Academic Free License version 3.0
# See the file "LICENSE" for more information

parent.0 = ../../../../lib/ecj/ec/gp/koza/koza.params

######################################################
pop.subpop.0.species.fitness = ec.gp.koza.KozaFitness
eval.problem = ec.app.kernel_gp.Kernel_GP_problem
eval.problem.data = ec.app.kernel_gp.SVMData

breedthreads = auto
evalthreads = auto

train-file = data/iris.scale.tr
test-file = data/iris.scale.t
validation-file = data/iris.scale.v
cross-validation = true
cv-folds = 10

state = ec.app.kernel_gp.SimpleEvolutionStateSVM

stat = ec.gp.koza.KozaStatistics
#stat = ec.simple.SimpleStatistics
stat.child.0.gather-full = true
stat.file =	out.stat

generations = 8
quit-on-run-complete = true

pop.subpop.0.size = 100

gp.tc.0.init = ec.gp.koza.FullBuilder
gp.tc.0.init.min-depth = 2
gp.tc.0.init.max-depth = 4


gp.koza.xover.maxdepth = 3
gp.koza.mutate.maxdepth = 3
gp.koza.grow.min-depth = 3
gp.koza.grow.max-depth = 4

pop.subpop.0.species.pipe = ec.breed.MultiBreedingPipeline
pop.subpop.0.species.pipe.num-sources = 2
	pop.subpop.0.species.pipe.source.0 = ec.gp.breed.MutateERCPipeline
	pop.subpop.0.species.pipe.source.0.prob = 0.9 
	pop.subpop.0.species.pipe.source.0.num-sources = 1
	pop.subpop.0.species.pipe.source.1 = ec.breed.ReproductionPipeline
	pop.subpop.0.species.pipe.source.1.prob = 0.1
		pop.subpop.0.species.pipe.source.0.source.0 = ec.breed.MultiBreedingPipeline
		pop.subpop.0.species.pipe.source.0.source.0.num-sources = 2 
		pop.subpop.0.species.pipe.source.0.source.0.source.0 = ec.gp.koza.CrossoverPipeline
		pop.subpop.0.species.pipe.source.0.source.0.source.0.prob = 0.9 
		pop.subpop.0.species.pipe.source.0.source.0.source.1 = ec.breed.ReproductionPipeline
		pop.subpop.0.species.pipe.source.0.source.0.source.1.prob = 0.1

breed.reproduce.source.0 = ec.parsimony.BucketTournamentSelection
gp.koza.xover.source.0 = ec.parsimony.BucketTournamentSelection
gp.koza.mutate.source.0 = ec.parsimony.BucketTournamentSelection
gp.breed.mutate-erc.source.0 = ec.parsimony.BucketTournamentSelection



breed.reproduce.source.0.num-buckets = 5
gp.koza.xover.source.0.num-buckets = 5
gp.koza.mutate.source.0.num-buckets = 5

select.bucket-tournament.size = 5

gp.breed.mutate-erc.tries = 1
gp.breed.mutate-erc.ns.0 = ec.gp.koza.KozaNodeSelector
gp.breed.mutate-erc.ns.0.root = 0.1 
gp.breed.mutate-erc.ns.0.terminal = 0.6 
gp.breed.mutate-erc.ns.0.nonterminal = 0.3 
#####################################################

# First, we're gonna change the number of trees in
# the individual, to accommodate the ADFs
# Each of our three trees uses a different tree constraints,
# tc0, tc1

pop.subpop.0.species.ind.numtrees = 1

# "The result-producing branch" (Koza-II p. 84)
pop.subpop.0.species.ind.tree.0 = ec.gp.GPTree
pop.subpop.0.species.ind.tree.0.tc = tc0

#################################################
gp.type.a.size = 6

#SVM nodes - svm_node objects vector
gp.type.a.0.name = svmnodes

#A double value, returned by a Kernel
gp.type.a.1.name = double

#ERC constant
gp.type.a.2.name = c_gamma

#ERC constant
gp.type.a.3.name = c_degree

#ERC constant
gp.type.a.4.name = c_coef

#ERC constant
gp.type.a.5.name = c_a

#################################################
#Tree constraints
gp.tc.size = 1

gp.tc.0.returns = double
gp.tc.0.name = tc0
gp.tc.0.fset = f0
gp.tc.0.init = ec.gp.koza.GrowBuilder

# We set the default for HalfBuilder to be a ramp of 2--6,
# with a grow probability of 0.5
gp.koza.half.min-depth = 3
gp.koza.half.max-depth = 6

##################################################
#Node constraints
gp.nc.size = 13

#Leaf - vector of svm_nodes
gp.nc.0 = ec.gp.GPNodeConstraints
gp.nc.0.name = nc_terminal
gp.nc.0.returns = svmnodes
gp.nc.0.size = 0

#
gp.nc.1 = ec.gp.GPNodeConstraints
gp.nc.1.name = nc_double_terminal
gp.nc.1.returns = double
gp.nc.1.size = 0

#Standard kernel function with 1 constant
gp.nc.2 = ec.gp.GPNodeConstraints
gp.nc.2.name = nc_kernel_1
gp.nc.2.returns = double
gp.nc.2.size = 2
gp.nc.2.child.0 = svmnodes
gp.nc.2.child.1 = c_gamma

#Standard kernel function with 2 constants
gp.nc.3 = ec.gp.GPNodeConstraints
gp.nc.3.name = nc_kernel_2
gp.nc.3.returns = double
gp.nc.3.size = 3
gp.nc.3.child.0 = svmnodes
gp.nc.3.child.1 = c_gamma
gp.nc.3.child.2 = c_coef

#Standard kernel function with 3 constants
gp.nc.4 = ec.gp.GPNodeConstraints
gp.nc.4.name = nc_kernel_3
gp.nc.4.returns = double
gp.nc.4.size = 4
gp.nc.4.child.0 = svmnodes
gp.nc.4.child.1 = c_gamma
gp.nc.4.child.2 = c_coef
gp.nc.4.child.3 = c_degree

#Constant modification of kernel - for ex. exp(kernel)
gp.nc.5 = ec.gp.GPNodeConstraints
gp.nc.5.name = nc_k-combination1
gp.nc.5.returns = double
gp.nc.5.size = 1
gp.nc.5.child.0 = double

#Combination of two kernels
gp.nc.6 = ec.gp.GPNodeConstraints
gp.nc.6.name = nc_k-combination2
gp.nc.6.returns = double
gp.nc.6.size = 2
gp.nc.6.child.0 = double
gp.nc.6.child.1 = double

#Combination of kernel and ERC constant
gp.nc.7 = ec.gp.GPNodeConstraints
gp.nc.7.name = nc_k-combination-c
gp.nc.7.returns = double
gp.nc.7.size = 2
gp.nc.7.child.0 = double
gp.nc.7.child.1 = c_a

#Standard kernel function with 0 constants
gp.nc.8 = ec.gp.GPNodeConstraints
gp.nc.8.name = nc_kernel_0
gp.nc.8.returns = double
gp.nc.8.size = 1
gp.nc.8.child.0 = svmnodes

#Terminal with ERC constant
gp.nc.9 = ec.gp.GPNodeConstraints
gp.nc.9.name = nc_ercgamma
gp.nc.9.returns = c_gamma
gp.nc.9.size = 0

#Terminal with ERC constant
gp.nc.10 = ec.gp.GPNodeConstraints
gp.nc.10.name = nc_erccoef
gp.nc.10.returns = c_coef
gp.nc.10.size = 0

#Terminal with ERC constant
gp.nc.11 = ec.gp.GPNodeConstraints
gp.nc.11.name = nc_ercdegree
gp.nc.11.returns = c_degree
gp.nc.11.size = 0

#Terminal with ERC constant
gp.nc.12 = ec.gp.GPNodeConstraints
gp.nc.12.name = nc_erca
gp.nc.12.returns = c_a
gp.nc.12.size = 0

##################################################
# We have one tree with one function set

gp.fs.size = 1

gp.fs.0 = ec.gp.GPFunctionSet
gp.fs.0.name = f0
gp.fs.0.size = 13


###Terminals
#Terminal with svm_node vector
gp.fs.0.func.0 = ec.app.kernel_gp.X
gp.fs.0.func.0.nc = nc_terminal

# ERC - Ephemeral Random Constant
gp.fs.0.func.1 = ec.app.kernel_gp.ERCgamma
gp.fs.0.func.1.nc = nc_ercgamma

# ERC - Ephemeral Random Constant
gp.fs.0.func.2 = ec.app.kernel_gp.ERCcoef
gp.fs.0.func.2.nc = nc_erccoef

# ERC - Ephemeral Random Constant
gp.fs.0.func.3 = ec.app.kernel_gp.ERCdegree
gp.fs.0.func.3.nc = nc_ercdegree

# ERC - Ephemeral Random Constant
gp.fs.0.func.4 = ec.app.kernel_gp.ERCa
gp.fs.0.func.4.nc = nc_erca

###Functions producing kernel from other kernel(s)
#Addition function used to combine two kernels into one (k+k)
gp.fs.0.func.5 = ec.app.kernel_gp.Add
gp.fs.0.func.5.nc = nc_k-combination2

#Multiplication function used to combine two kernels into one (k*k)
gp.fs.0.func.6 = ec.app.kernel_gp.Mul
gp.fs.0.func.6.nc = nc_k-combination2

#Expotential (e^k)
gp.fs.0.func.7 = ec.app.kernel_gp.Exp
gp.fs.0.func.7.nc = nc_k-combination1

#Multiplication of kernel by double (a*k)
gp.fs.0.func.8 = ec.app.kernel_gp.aMul
gp.fs.0.func.8.nc = nc_k-combination-c

###Standard Kernels
#Polynomial - standard kernel function  
gp.fs.0.func.9 = ec.app.kernel_gp.Poly
gp.fs.0.func.9.nc = nc_kernel_3

#RBF - standard kernel function 
gp.fs.0.func.10 = ec.app.kernel_gp.RBF
gp.fs.0.func.10.nc = nc_kernel_1

#Sigmoid - standard kernel function
gp.fs.0.func.11 = ec.app.kernel_gp.Sigmoid
gp.fs.0.func.11.nc = nc_kernel_2

#Linear - standard kernel function
gp.fs.0.func.12 = ec.app.kernel_gp.Linear
gp.fs.0.func.12.nc = nc_kernel_0


